{
  "_from": "express-fileupload",
  "_id": "express-fileupload@1.1.6",
  "_inBundle": false,
  "_integrity": "sha512-w24zPWT8DkoIxSVkbxYPo9hkTiLpCQQzNsLRTCnecBhfbYv+IkIC5uLw2MIUAxBZ+7UMmXPjGxlhzUXo4RcbZw==",
  "_location": "/express-fileupload",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "express-fileupload",
    "fetchSpec": "latest",
    "name": "express-fileupload",
    "raw": "express-fileupload",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-fileupload/-/express-fileupload-1.1.6.tgz",
  "_shasum": "0ac2659ad8c1128c92c8580fd6e15b8b15343db0",
  "_spec": "express-fileupload",
  "_where": "/home/ubuntu/schmessage",
  "author": {
    "email": "richardgirges@gmail.com",
    "name": "Richard Girges"
  },
  "bugs": {
    "url": "https://github.com/richardgirges/express-fileupload/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "busboy": "^0.3.1"
  },
  "deprecated": false,
  "description": "Simple express file upload middleware that wraps around Busboy",
  "devDependencies": {
    "body-parser": "^1.18.3",
    "coveralls": "^3.0.2",
    "eslint": "^5.9.0",
    "express": "^4.16.3",
    "istanbul": "^0.4.5",
    "md5": "^2.2.1",
    "mocha": "^5.2.0",
    "rimraf": "^2.6.2",
    "supertest": "^3.3.0"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "homepage": "https://github.com/richardgirges/express-fileupload#readme",
  "keywords": [
    "busboy",
    "express",
    "file-upload",
    "files",
    "forms",
    "middleware",
    "multipart",
    "upload"
  ],
  "license": "MIT",
  "main": "./lib/index",
  "name": "express-fileupload",
  "optionalDependencies": {},
  "readme": "# express-fileupload\nSimple express middleware for uploading files.\n\n[![npm](https://img.shields.io/npm/v/express-fileupload.svg)](https://www.npmjs.org/package/express-fileupload)\n[![Build Status](https://travis-ci.org/richardgirges/express-fileupload.svg?branch=master)](https://travis-ci.org/richardgirges/express-fileupload)\n[![downloads per month](http://img.shields.io/npm/dm/express-fileupload.svg)](https://www.npmjs.org/package/express-fileupload)\n[![Coverage Status](https://img.shields.io/coveralls/richardgirges/express-fileupload.svg)](https://coveralls.io/r/richardgirges/express-fileupload)\n\n# Install\n```bash\n# With NPM\nnpm install --save express-fileupload\n\n# With Yarn\nyarn add express-fileupload\n```\n\n# Usage\nWhen you upload a file, the file will be accessible from `req.files`.\n\nExample:\n* You're uploading a file called **car.jpg**\n* Your input's name field is **foo**: `<input name=\"foo\" type=\"file\" />`\n* In your express server request, you can access your uploaded file from `req.files.foo`:\n```javascript\napp.post('/upload', function(req, res) {\n  console.log(req.files.foo); // the uploaded file object\n});\n```\n\nThe **req.files.foo** object will contain the following:\n* `req.files.foo.name`: \"car.jpg\"\n* `req.files.foo.mv`: A function to move the file elsewhere on your server\n* `req.files.foo.mimetype`: The mimetype of your file\n* `req.files.foo.data`: A buffer representation of your file, returns empty buffer in case useTempFiles option was set to true.\n* `req.files.foo.tempFilePath`: A path to the temporary file in case useTempFiles option was set to true.\n* `req.files.foo.truncated`: A boolean that represents if the file is over the size limit\n* `req.files.foo.size`: Uploaded size in bytes\n* `req.files.foo.md5`: MD5 checksum of the uploaded file\n\n**Notes about braking changes with md5 handling:**\n\n* Before 1.0.0 `md5` is a MD5 checksum of the uploaded file.\n* In 1.0.0 and till 1.1.1 `md5` value is a function to compute md5 hash [Read about it here.](https://github.com/richardgirges/express-fileupload/releases/tag/v1.0.0-alpha.1)\n* From 1.1.1 it was reverted back to MD5 checksum value and also added full md5 support in case of using temporary files.\n\n\n### Examples\n* [Example Project](https://github.com/richardgirges/express-fileupload/tree/master/example)\n* [Basic File Upload](https://github.com/richardgirges/express-fileupload/tree/master/example#basic-file-upload)\n* [Multi-File Upload](https://github.com/richardgirges/express-fileupload/tree/master/example#multi-file-upload)\n\n### Using Busboy Options\nPass in Busboy options directly to the express-fileupload middleware. [Check out the Busboy documentation here.](https://github.com/mscdex/busboy#api)\n\n```javascript\napp.use(fileUpload({\n  limits: { fileSize: 50 * 1024 * 1024 },\n}));\n```\n\n### Using useTempFile Options\nUse temp files instead of memory for managing the upload process.\n\n```\n Note that this option available for versions 1.0.0 and newer. \n```\n\n```javascript\napp.use(fileUpload({\n    useTempFiles : true,\n    tempFileDir : '/tmp/'\n}));\n```\n### Using debug option\n\nYou can set `debug` option to `true` to see some logging about upload process.\nIn this case middleware uses `console.log` and adds `Express-file-upload` prefix for outputs.\n\nIt will show you whether the request is illigable and also common events triggered during upload.\nThat can be really usfull for troubleshhoting and ***we recommend to attach debug output to each issue on Github***.\n\n***Output example:***\n\n```\nExpress-file-upload: Temporary file path is /node/express-fileupload/test/temp/tmp-16-1570084843942\nExpress-file-upload: New upload started testFile->car.png, bytes:0\nExpress-file-upload: Uploading testFile->car.png, bytes:21232...\nExpress-file-upload: Uploading testFile->car.png, bytes:86768...\nExpress-file-upload: Upload timeout testFile->car.png, bytes:86768\nExpress-file-upload: Cleaning up temporary file /node/express-fileupload/test/temp/tmp-16-1570084843942...\n```\n\n***Description:***\n\n* `Temporary file path is...` says that `useTempfiles` was set to true and also shows you temp file name and path.\n* `New upload started testFile->car.png` says that new upload started with field `testFile` and file name `car.png`.\n* `Uploading testFile->car.png, bytes:21232...` shows current progress for each new data chunk.\n* `Upload timeout` means that no data came during `uploadTimeout`.\n* `Cleaning up temporary file` Here finaly we see cleaning up of the temporary file because of upload timeout reached.\n\n### Available Options\nPass in non-Busboy options directly to the middleware. These are express-fileupload specific options.\n\nOption | Acceptable&nbsp;Values | Details\n--- | --- | ---\ncreateParentPath | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Automatically creates the directory path specified in `.mv(filePathName)`\nuriDecodeFileNames | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Applies uri decoding to file names if set true.\nsafeFileNames | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></li><li>regex</li></ul> | Strips characters from the upload's filename. You can use custom regex to determine what to strip. If set to `true`, non-alphanumeric characters _except_ dashes and underscores will be stripped. This option is off by default.<br /><br />**Example #1 (strip slashes from file names):** `app.use(fileUpload({ safeFileNames: /\\\\/g }))`<br />**Example #2:** `app.use(fileUpload({ safeFileNames: true }))`\npreserveExtension | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></li><li><code>*Number*</code></li></ul> | Preserves filename extension when using <code>safeFileNames</code> option. If set to <code>true</code>, will default to an extension length of 3. If set to <code>*Number*</code>, this will be the max allowable extension length. If an extension is smaller than the extension length, it remains untouched. If the extension is longer, it is shifted.<br /><br />**Example #1 (true):**<br /><code>app.use(fileUpload({ safeFileNames: true, preserveExtension: true }));</code><br />*myFileName.ext* --> *myFileName.ext*<br /><br />**Example #2 (max extension length 2, extension shifted):**<br /><code>app.use(fileUpload({ safeFileNames: true, preserveExtension: 2 }));</code><br />*myFileName.ext* --> *myFileNamee.xt*\nabortOnLimit | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Returns a HTTP 413 when the file is bigger than the size limit if true. Otherwise, it will add a <code>truncated = true</code> to the resulting file structure.\nresponseOnLimit | <ul><li><code>'File size limit has been reached'</code>&nbsp;**(default)**</li><li><code>*String*</code></ul> | Response which will be send to client if file size limit exceeded when abortOnLimit set to true.\nlimitHandler | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>function(req, res, next)</code></li></ul> | User defined limit handler which will be invoked if the file is bigger than configured limits.\nuseTempFiles | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Will use temporary files at the specified tempDir for managing uploads rather than using buffers in memory. This avoids memory issues when uploading large files.\ntempFileDir | <ul><li><code>String</code>&nbsp;**(path)**</li></ul> | Used with the <code>useTempFiles</code> option. Path to the directory where temp files will be stored during the upload process. Feel free to add trailing slash, but it is not necessary.\nparseNested | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></li></ul> | By default, req.body and req.files are flattened like this: <code>{'name': 'John', 'hobbies[0]': 'Cinema', 'hobbies[1]': 'Bike'}</code><br /><br/>When this option is enabled they are parsed in order to be nested like this: <code>{'name': 'John', 'hobbies': ['Cinema', 'Bike']}</code>\ndebug | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></ul> | Turn on/off upload process logging. Can be usefull for troubleshooting.\n\n# Help Wanted\nLooking for additional maintainers. Please contact `richardgirges [ at ] gmail.com` if you're interested. Pull Requests are welcomed! \n\n# Thanks & Credit\n[Brian White](https://github.com/mscdex) for his stellar work on the [Busboy Package](https://github.com/mscdex/busboy) and the [connect-busboy Package](https://github.com/mscdex/connect-busboy)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/richardgirges/express-fileupload.git"
  },
  "scripts": {
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "lint": "eslint ./",
    "test": "istanbul cover node_modules/mocha/bin/_mocha -- -R spec"
  },
  "version": "1.1.6"
}
